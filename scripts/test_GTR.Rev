########################################################
#
# RevBayes Example: Non-reversible to reversible substitution model on strict clock tree
#
#
# authors: Sebastian Hoehna & John Huelsenbeck
#
########################################################

ANALYSIS_NAME = args[1]


#######################
# Reading in the Data #
#######################

# Import the molecular sequences #
# this file contains only the taxa for which sequence data are available #
aln <- readDiscreteCharacterData("data/"+ANALYSIS_NAME+".nex")

## helpers
n_taxa <- aln.size()
taxa <- aln.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##################################################
# Fixed topology with exponential branch lengths #
##################################################

rooted_tree <- readTrees("data/"+ANALYSIS_NAME+"_rooted.tre", treetype="non-clock")[1]

outgroup <- clade("Diplolaemus_darwinii")

tree ~ dnUniformTopologyBranchLength( branchLengthDistribution=dnExp(10.0), taxa,
                                      rooted=!TRUE,
                                      outgroup )
tree.setValue( rooted_tree )

TL := tree.treeLength()

moves.append( mvBranchLengthScale( tree, weight=n_taxa*2-1 ) )




#######################################
# GTR+G nucleotide substitution model #
#######################################


pi ~ dnDirichlet( rep(1,4) )
er ~ dnDirichlet( rep(1,6) )

moves.append( mvDirichletSimplex(pi, weight=1) )
moves.append( mvDirichletSimplex(er, weight=1) )
moves.append( mvBetaSimplex(pi, weight=1) )
moves.append( mvBetaSimplex(er, weight=1) )

# Create the matrix #
Q_gen := fnGTR(er, pi)

# Create a discretized gamma distribution of rate categories  #
# the shape parameter is drawn from an uniform prior #
alpha ~ dnUniform( 0.0, 1E6 )
alpha.setValue( 1.0 )

moves.append( mvScale(alpha, lambda=0.5,tune=true, weight=2.0) )

rates := fnDiscretizeGamma( alpha, alpha, 4 )

# Create the substitution model and clamp with our observed DNA data #
phySeq ~ dnPhyloCTMC(tree=tree, Q=Q_gen, siteRates=rates, type="DNA")
phySeq.clamp(aln)



########
# MCMC #
########

# initialize the model object #
mymodel = model(Q_gen)


# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="output/"+ANALYSIS_NAME+"_GTR.log", printgen=10) )

# 2. the tree #
monitors.append( mnFile(filename="output/"+ANALYSIS_NAME+"_GTR.trees", printgen=10, tree) )

# 3. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100, alpha) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=8, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=50000, tuningInterval=200, underPrior=!TRUE)


# Quit RevBayes #
q()
